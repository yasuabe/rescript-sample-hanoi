// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Core__List from "@rescript/core/src/Core__List.res.mjs";
import * as Webapi__Canvas__Canvas2d from "rescript-webapi/src/Webapi/Canvas/Webapi__Canvas__Canvas2d.res.mjs";

function fromRods(param) {
  return {
          hd: param[0],
          tl: {
            hd: param[1],
            tl: {
              hd: param[2],
              tl: /* [] */0
            }
          }
        };
}

function getRod(param, id) {
  switch (id) {
    case "A" :
        return param[0];
    case "B" :
        return param[1];
    case "C" :
        return param[2];
    default:
      throw {
            RE_EXN_ID: "Assert_failure",
            _1: [
              "Hanoi.res",
              23,
              11
            ],
            Error: new Error()
          };
  }
}

function setRod(param, id, newRod) {
  var c = param[2];
  var b = param[1];
  var a = param[0];
  switch (id) {
    case "A" :
        return [
                newRod,
                b,
                c
              ];
    case "B" :
        return [
                a,
                newRod,
                c
              ];
    case "C" :
        return [
                a,
                b,
                newRod
              ];
    default:
      throw {
            RE_EXN_ID: "Assert_failure",
            _1: [
              "Hanoi.res",
              31,
              11
            ],
            Error: new Error()
          };
  }
}

function solve(n, from, to_, aux) {
  if (n > 0) {
    return Core__List.concatMany([
                solve(n - 1 | 0, from, aux, to_),
                {
                  hd: [
                    from,
                    to_
                  ],
                  tl: /* [] */0
                },
                solve(n - 1 | 0, aux, to_, from)
              ]);
  } else {
    return /* [] */0;
  }
}

function applyMove(state, param) {
  var toId = param[1];
  var fromId = param[0];
  var fromRod = getRod(state, fromId);
  var toRod = getRod(state, toId);
  return setRod(setRod(state, fromId, Core__List.tailExn(fromRod)), toId, {
              hd: Core__List.headExn(fromRod),
              tl: toRod
            });
}

function drawRod(ctx, height) {
  return function (x) {
    var match = Webapi__Canvas__Canvas2d.reifyStyle("#990");
    ctx.fillStyle = match[1];
    ctx.fillRect(x, 50.0, 10.0, height - 70.0);
  };
}

function drawRods(ctx, height, xs) {
  Core__List.forEach(xs, drawRod(ctx, height));
}

function draw(state, canvas) {
  var ctx = canvas.getContext("2d");
  var rect = canvas.getBoundingClientRect();
  var width = rect.width;
  var height = rect.height;
  ctx.clearRect(0.0, 0.0, width, height);
  var rodX = Core__List.map({
        hd: 1,
        tl: {
          hd: 2,
          tl: {
            hd: 3,
            tl: /* [] */0
          }
        }
      }, (function (n) {
          return n * width / 4.0;
        }));
  drawRods(ctx, height, rodX);
  var baseY = height - 40.0;
  Core__List.forEach(Core__List.zip(fromRods(state), rodX), (function (param) {
          var x = param[1];
          Core__List.forEachWithIndex(Core__List.reverse(param[0]), (function (size, i) {
                  var y = baseY - i * 20.0;
                  var width = 20.0 + size * 20.0;
                  var x$p = x - width / 2.0;
                  var match = Webapi__Canvas__Canvas2d.reifyStyle("teal");
                  ctx.fillStyle = match[1];
                  ctx.fillRect(x$p, y, width, 20.0);
                }));
        }));
}

var initState = [
  {
    hd: 1,
    tl: {
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }
  },
  /* [] */0,
  /* [] */0
];

export {
  draw ,
  solve ,
  applyMove ,
  initState ,
}
/* Webapi__Canvas__Canvas2d Not a pure module */
